; file:		lx164_util.mar
;
; Copyright (C) 1996 by
; Digital Equipment Corporation, Maynard, Massachusetts.
; All rights reserved.
;
; This software is furnished under a license and may be used and copied
; only  in  accordance  of  the  terms  of  such  license  and with the
; inclusion of the above copyright notice. This software or  any  other
; copies thereof may not be provided or otherwise made available to any
; other person.  No title to and  ownership of the  software is  hereby
; transferred.
;
; The information in this software is  subject to change without notice
; and  should  not  be  construed  as a commitment by digital equipment
; corporation.
;
; Digital assumes no responsibility for the use  or  reliability of its
; software on equipment which is not supplied by digital.
;      

;++
;  FACILITY:
;
;      Alpha SRM Console Firmware
;                                                             
;  MODULE DESCRIPTION:
;
;	Platform specific Alpha Macro firmware functions.
;
;  AUTHORS:
;
;	Eric Rasmussen
;
;  CREATION DATE:
;                                                    
;	20-Nov-1996
;
;  MODIFICATION HISTORY:                                 
;
;
;--

	.title	lx164_util

;Libraries

;	$mxr
;	$pal_func
        $PALTEMP                ; expand definitions in alphamac.mlb
        $EV5DEF                 ; :


	.show	expansions

;+
;
; Macro section.
;
;-

.macro	pd	name,alias
.if df macro64$
	.procedure_descriptor	name, _'name'_
.if nb alias
	.procedure_descriptor	alias, _'name'_
.endc
.iff
name::
.if nb alias
alias::
.endc
.endc
	.quad	8
	.quad	_'name'_
.endm

.macro	ref	name
'name'_:
_'name' = . - linkage
	.quad	name
.endm

;+
;
; This macro is used to put a character to the COM1 serial port.
;
; Inputs:
;	ascchar	= Character to be displayed
;	rcom,rs	= Scratch registers
;-

com1 = ^x3f8
com2 = ^x2f8
thr = 0
rbr = 0
dll = 0
ier = 1
iir = 2
lcr = 3
mcr = 4
lsr = 5
msr = 6
scr = 7
lsr$v_dr == 0
lsr$m_dr == 1
lsr$v_thre == 5
lcr$m_sbs  == ^x04
lcr$m_dla  == ^x80
mcr$m_dtr  == ^x01
mcr$m_rts  == ^x02
mcr$m_out1 == ^x04
mcr$m_out2 == ^x08
baud_9600  == ^x0c
char_8bit  == ^x03

;
; Addressing definitions
;
io_base == ^x858
addr_shift == ^x5
byte_access == ^x0
word_access == ^x1
trib_access == ^x2
lwrd_access == ^x3

.macro	combott_putc 	ascchar,rcom,rs,?lab1,?lab2
	lda	'rcom',io_base(r31)	; I/O and ISA bus base address 	
	sll	'rcom',#28,'rcom'
	lda	'rs',com1+lsr(r31)	; line status register
	sll	'rs',#addr_shift,'rs'	; shifted com1 address
	bis	'rs','rcom','rcom'	; or it in with the base address	
lab1:        			
	ldl	'rs',('rcom')		; get status register
	mb				; force out the read 
	srl	'rs',#lsr$v_thre+8,'rs'	; extract the ready bit
	blbc    'rs',lab1               ; if not ready to txmit, spin.
	lda	'rcom',io_base(r31)	; I/O and ISA bus base address 	
	sll	'rcom',#28,'rcom'
	lda	'rs',com1+thr(r31)	; transmit holding register
	sll	'rs',#addr_shift,'rs'	; shifted com1 address
	bis	'rs','rcom','rcom'	; tt port address in rcom	
	and	'ascchar',#^xff,'rs'
	stl	'rs',('rcom')		; xmit the character
	mb				; wait for the write
.endm  combott_putc

.macro	combo_write port, datum, raddr, rdata, rs
	lda	'raddr', io_base(r31)	; get base address for ISA
	sll	'raddr', #28, 'raddr'
	lda	'rdata', port(r31)	;
	sll	'rdata', addr_shift, 'rdata'
	bis	'raddr', 'rdata', 'raddr'
	lda	'rdata', datum(r31)
	and	'rdata',#^xff,'rdata'
	sll	'rdata',#8,'rs'
	bis	'rdata','rs','rs'	; 00 00 char char
	sll	'rdata',#16,'rdata'
	bis	'rdata','rs','rs'	; 00 char char char
	sll	'rdata',#8,'rdata'
	bis	'rdata','rs','rdata'	; char char char char
	stl	'rdata', ('raddr')
	mb
.endm combo_write

.macro	combo_read port, raddr, rdata
	lda	'raddr', io_base(r31)
	sll	'raddr', #28, 'raddr'
	lda	'rdata', port(r31)
	sll	'rdata', addr_shift, 'rdata'
	bis	'raddr', 'rdata', 'raddr'
	ldl	'rdata', ('raddr')
	mb
	srl	'raddr', addr_shift, 'raddr'
	and	'raddr', #3, 'raddr'
	sll	'raddr', #3, 'raddr'
	srl	'rdata', 'raddr', 'rdata'
	and	'rdata', #^xff, 'rdata'
.endm combo_read

;+
;
; This macro is used to put a register to the COM1 serial port.
;
; Inputs:
;	rd = Register to be displayed
;	r12,r13,r14,r15 = Scratch registers
;-

.macro	combott_rputc 	rd,?slp,?blp
	lda	r12,64(r31)		; Load the shift count
slp:	subq	r12,4,r12		; Get the new count
	srl	'rd',r12,r13		; Shift the nibble into position
	and	r13,^xf,r13		; Use only the nibble
	cmplt	r13,#10,r14		; If greater = ^xa	
	blbs	r14,blp               	; Don't branch
	addq	r13,#7,r13		; Add some extra for ^x and over
blp:	addq	r13,#48,r13		; Add for ascii
	combott_putc r13,r14,r15	; rs = character to be displayed
	bne	r12,slp			; Branch until we're finished
.endm  combott_rputc

;+
;
; This macro is used to get a character from the COM1 serial port.
;
; Inputs:
;	rr = register where the character is to be returned
;	rcom,rs	= Scratch registers
;-

.macro	combott_getc 	rr,rcom,rs,?lab1

	lda	'rcom',io_base(r31)	; get ISA base address 	
	sll	'rcom',#28,'rcom'
	lda	'rs',com1+lsr(r31)	; line status register
	sll	'rs',addr_shift,'rs'	; shifted com1 address
	bis	'rs','rcom','rcom'	; tt port address in rcom	

lab1:        			
	ldl	'rs',('rcom')		; read the status register
	mb
	srl	'rs',#lsr$v_dr+8,'rs'	; extract data ready bit  
	blbc    'rs',lab1               ; if no character yet, spin.

	lda	'rcom',io_base(r31)	; I/O and ISA bus address 	
	sll	'rcom',#28,'rcom'
	lda	'rs',com1+rbr(r31)	; receive buffer register
	sll	'rs',addr_shift,'rs'	; shifted com1 address
	bis	'rs','rcom','rcom'	; tt port address in rcom	

	ldl	'rr',('rcom')		; get the character
	mb
	;
	; no need to shift data into position
	;
	; it is at byte 0
	;
	and	'rr',#^xff,'rr'		; and only the character

.endm  combott_getc

;+
;
; This macro is used to output an 8-bit hex POST code to an LED card
; at ISA I/O port address 80h.
;
; Inputs:
;	rs, rcom = Scratch registers
;-
led_port == ^x80

.macro	LED_WRITE 	rs, rcom
	lda	'rcom', io_base(r31)
	sll	'rcom', #28-5, 'rcom'
	lda	'rcom', led_port('rcom')
	sll	'rcom', #5, 'rcom'
	and	'rs', ^xFF, 'rs'
	mb
	stl	'rs', 0('rcom')
	mb
	mb
.endm

;+
;
; Data section.
;
;-

	.psect	kernel$data, 4, noexe

pd	jputc
pd	jgetc
pd	jxgetc
pd	j_rx_ready
pd	outLEDPort

;+
;
; Code section.
;
;-
.if df macro64$
	.psect	kernel$code, 6, exe, mix
.iff
	.psect	kernel$code, 6, exe
.endc

	.subtitle	jputc
;+
; ============================================================================
; = jputc - Display a character to the COM1 serial port.                     =
; ============================================================================
;
; OVERVIEW:
;
;	This routine displays a character to the COM1 serial port.
;	It simply uses the macro combott_putc.
;-
_jputc_:

;Display the character
	combott_putc r16,r0,r1
    	ret	r31,(r26)

	.subtitle	jgetc
;+
; ============================================================================
; = jgetc - Get a character from the COM1 serial port.                       =
; ============================================================================
;
; OVERVIEW:
;
;	This routine simply gets a character from the COM1 serial port.
;	It simply gets the character from the combo chip.
;-

_jgetc_:

	lda	r16,io_base(r31)	; ISA bus base address 	
	sll	r16,#28,r16
	lda	r0,rbr(r31)		; receive buffer register
	sll	r0,addr_shift,r0	; shifted com1 address
	bis	r0,r16,r16		; tt port address in rcom	

	ldl	r0,(r16)		; get the character
	and	r0,#^xff,r0		; and only the character

    	ret	r31,(r26)

	.subtitle	jxgetc
;+
; ============================================================================
; = jxgetc - Get a character from the COM1 serial port.                      =
; ============================================================================
;
; OVERVIEW:
;
;	This routine simply gets a character from the COM1 serial port.
;	It simply gets the character from the combo chip. This routine
;	blocks until the character is available.
;-

_jxgetc_:
	combott_getc r0,r16,r17
    	ret	r31,(r26)


	.subtitle	j_rx_ready
;+
; ============================================================================
; = j_rx_ready - Check for input character.                                  =
; ============================================================================
;
; OVERVIEW:
;
;	This routine simply tests the line status register for an
;	input character ready.
;-

_j_rx_ready_:

	lda	r16,io_base(r31)	; I/O and ISA bus address 	
	sll	r16,#28,r16
	lda	r0,lsr(r31)		; line status register
	sll	r0,addr_shift,r0	; shifted com1 address
	bis	r0,r16,r16		; tt port address in rcom	

	ldl	r0,(r16)
	srl	r0,#lsr$v_dr+8,r0	; extract data ready bit  
	and	r0,#lsr$m_dr,r0		; Mask data ready bit  
    	ret	r31,(r26)

	.subtitle	outLEDPort
;+
; ============================================================================
; = outLEDPort - Output an 8-bit hex POST code                               =
; ============================================================================
;
; OVERVIEW:
;
;	This routine will output an 8-bit hex POST code to an LED port.
;-

_outLEDPort_:

	LED_WRITE r16, r0
    	ret	r31, (r26)
