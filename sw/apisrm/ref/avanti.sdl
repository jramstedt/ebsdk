/* file:	avanti.sdl
/*
/* Copyright (C) 1990 by
/* Digital Equipment Corporation, Maynard, Massachusetts.
/* All rights reserved.
/*
/* This software is furnished under a license and may be used and copied
/* only  in  accordance  of  the  terms  of  such  license  and with the
/* inclusion of the above copyright notice. This software or  any  other
/* copies thereof may not be provided or otherwise made available to any
/* other person.  No title to and  ownership of the  software is  hereby
/* transferred.
/*
/* The information in this software is  subject to change without notice
/* and  should  not  be  construed  as a commitment by digital equipment
/* corporation.
/*
/* Digital assumes no responsibility for the use  or  reliability of its
/* software on equipment which is not supplied by digital.
/*
/*
/* Abstract:	Avanti specific definitions for Alpha firmware.
/*
/* Author:	David Mayo
/*
/* Modifications:
/*	dtr	24-may-1995 added ipl_run
/*
module	$machdep;

/*
/* avanti specific parameters of the HWRPB
/*

constant IPL_RUN equals 20;
constant HWRPB$_PAGESIZE equals %x2000;	/* System page size in bytes
constant HWRPB$_PAGEBITS equals 13;	/* System page size in bits
constant HWRPB$_PA_SIZE equals 34;	/* Physical address size in bits
constant HWRPB$_ASN_MAX equals 63; 	/* Maximum ASN value 
constant HWRPB$_SYSTYPE equals 13;	/* Alpha system type (Avanti)
constant HWRPB$_SYSVAR equals 5;	/* System variation (MP Capable)
constant HWRPB$_NPROC equals 2;		/* Number of processor supported
constant HWRPB$_ICLK_FREQ equals 4096*1024; /* Interval timer frequency
constant HWRPB$_CC_FREQ equals 100000000; /* Cycle counter frequency (@10ns)
constant HWRPB$_CC_FREQ_50 equals 200000000; /* Cycle counter frequency (@5ns)
constant HWRPB$_CC_FREQ_60 equals 166666667; /* Cycle counter frequency (@6ns)
constant HWRPB$_CC_FREQ_66 equals 151515152; /* Cycle counter frequency (@6.6ns)
constant HWRPB$_CC_FREQ_70 equals 142857143; /* Cycle counter frequency (@7ns)

constant SLOT$_CPU_TYPE equals 2;	/* Processor type (EV4)
constant SLOT$_CPU_VAR equals 3;	/* Processor Variation (VAX/IEEE FP)
constant SLOT$_PAL_LOGOUT equals %x6000; /* PAL logout area
constant SLOT$_PAL_LOGOUT_LEN equals %x400; /* PAL logout area length

constant FRU_TBL_PORTA equals 1;	/* bus A not polled yet
constant FRU_TBL_PORTB equals 2;	/* bus B not polled yet
constant FRU_TBL_PORTC equals 4;	/* bus C not polled yet
constant FRU_TBL_PORTD equals 8;	/* bus D not polled yet
constant FRU_TBL_PORTE equals 16;	/* bus E not polled yet

constant CTB$MAX_UNITS equals  1;	/*  console type 4
                                          
constant CTB$CSR0 equals 0;		/* Base CSR address for LOC port
constant CTB$TX_IPL0 equals 20;		/* Transmit interrupt IPL for LOC port
constant CTB$TX_SCB0 equals %x840;	/* Transmit vector for LOC port
constant CTB$RX_IPL0 equals 20;		/* Receive interrupt IPL for LOC port
constant CTB$RX_SCB0 equals %x840;	/* Receive vector for LOC port

constant CTB$CSR1 equals 0;		/* Base CSR address for RD port
constant CTB$TX_IPL1 equals 20;		/* Transmit interrupt for RD port
constant CTB$TX_SCB1 equals %x830;	/* Transmit vector for RD port
constant CTB$RX_IPL1 equals 20;		/* Receive interrupt IPL for RD port
constant CTB$RX_SCB1 equals %x830;	/* Receive vector for RD port

constant COM1_VECTOR  equals %x84;	/* serial port COM1 vector irq4
constant COM2_VECTOR  equals %x83;	/* serial port COM2 vector irq3
constant KEYBD_VECTOR equals %x81;	/* keyboard vector         irq1
constant MOUSE_VECTOR equals %x8c;	/* mouse    vector	   irq12

constant KEYBD_TIMEOUT_CONSTANT equals 250;     /* Timeout value

constant AVANTI$PRIMARY_CPU equals 0;	/* AVANTI primary cpu

constant AVANTI$PMBX1_PIO_OFFSET equals %x00000140; /* AVANTI interprocessor register 1
constant AVANTI$PMBX2_PIO_OFFSET equals %x08000140; /* AVANTI interprocessor register 2

constant AVANTI$DISPLAY_EV  	equals %x01; /* Display ev registers
constant AVANTI$DISPLAY_CB  	equals %x02; /* Display AVANTI registers
constant AVANTI$DISPLAY_PC  	equals %x04; /* Display Process info
constant AVANTI$CMM_TOTAL  	equals 4;    /* Total memory boards for AVANTI
constant AVANTI$1MB_BCACHE_SIZE 	equals %x100000; /* Size in bytes of the BCache
constant AVANTI$4MB_BCACHE_SIZE 	equals %x400000; /* Size in bytes of the BCache

constant PRIMARY_BRIDGE EQUALS 0;
constant SECONDARY_BRIDGE EQUALS 0;

aggregate MCHK$LOGOUT structure prefix "" tag "" fill;
	biu_stat		quadword unsigned;
	coma_gcr		quadword unsigned;
	coma_edsr		quadword unsigned;
	coma_ter		quadword unsigned;
	coma_elar		quadword unsigned;
	coma_ehar		quadword unsigned;
	coma_ldlr		quadword unsigned;
	coma_ldhr		quadword unsigned;
	coma_base0		quadword unsigned;
	coma_base1		quadword unsigned;
	coma_base2		quadword unsigned;
	coma_cnfg0		quadword unsigned;
	coma_cnfg1		quadword unsigned;
	coma_cnfg2		quadword unsigned;
	epic_dcsr		quadword unsigned;
	epic_pear		quadword unsigned;
	epic_sear		quadword unsigned;
	epic_tbr1		quadword unsigned;
	epic_tbr2		quadword unsigned;
	epic_pbr1		quadword unsigned;
	epic_pbr2		quadword unsigned;
	epic_pmr1		quadword unsigned;
	epic_pmr2		quadword unsigned;
	epic_harx1		quadword unsigned;
	epic_harx2		quadword unsigned;
	epic_pmlt		quadword unsigned;
	epic_tag0		quadword unsigned;
	epic_tag1		quadword unsigned;
	epic_tag2		quadword unsigned;
	epic_tag3		quadword unsigned;
	epic_tag4		quadword unsigned;
	epic_tag5		quadword unsigned;
	epic_tag6		quadword unsigned;
	epic_tag7		quadword unsigned;
	epic_data0		quadword unsigned;
	epic_data1		quadword unsigned;
	epic_data2		quadword unsigned;
	epic_data3		quadword unsigned;
	epic_data4		quadword unsigned;
	epic_data5		quadword unsigned;
	epic_data6		quadword unsigned;
	epic_data7		quadword unsigned;
end MCHK$LOGOUT;

aggregate PAL$LOGOUT structure prefix "" tag "" fill;
	r_byte_count		quadword unsigned;
	sys_proc$$offset	quadword unsigned;
	mchk_code		quadword unsigned;
	pt1			quadword unsigned;
	pt2			quadword unsigned;
	pt3			quadword unsigned;
	pt4			quadword unsigned;
	pt5			quadword unsigned;
	pt6			quadword unsigned;
	pt7			quadword unsigned;
	pt8			quadword unsigned;
	pt9			quadword unsigned;
	pt10			quadword unsigned;
	pt11			quadword unsigned;
	pt12			quadword unsigned;
	pt13			quadword unsigned;
	pt14			quadword unsigned;
	pt15			quadword unsigned;
	pt16			quadword unsigned;
	pt17			quadword unsigned;
	pt18			quadword unsigned;
	pt19			quadword unsigned;
	pt20			quadword unsigned;
	pt21			quadword unsigned;
	pt22			quadword unsigned;
	pt23			quadword unsigned;
	pt24			quadword unsigned;
	pt25			quadword unsigned;
	pt26			quadword unsigned;
	pt27			quadword unsigned;
	pt28			quadword unsigned;
	pt29			quadword unsigned;
	pt30			quadword unsigned;
	pt31			quadword unsigned;
	exc_addr		quadword unsigned;
	exc_sum			quadword unsigned;
	exc_msk			quadword unsigned;
	iccsr			quadword unsigned;
	pal_base		quadword unsigned;
	hier			quadword unsigned;
	hirr			quadword unsigned;
	mm_csr			quadword unsigned;
	dc_stat			quadword unsigned;
	dc_addr			quadword unsigned;
	abox_ctl		quadword unsigned;
	biu_stat		quadword unsigned;
	biu_addr		quadword unsigned;
	biu_ctl			quadword unsigned;
	fill_syndrome		quadword unsigned;
	fill_addr		quadword unsigned;
	va			quadword unsigned;
	bc_tag			quadword unsigned;

	coma_gcr		quadword unsigned;
	coma_edsr		quadword unsigned;
	coma_ter		quadword unsigned;
	coma_elar		quadword unsigned;
	coma_ehar		quadword unsigned;
	coma_ldlr		quadword unsigned;
	coma_ldhr		quadword unsigned;
	coma_base0		quadword unsigned;
	coma_base1		quadword unsigned;
	coma_base2		quadword unsigned;
	coma_cnfg0		quadword unsigned;
	coma_cnfg1		quadword unsigned;
	coma_cnfg2		quadword unsigned;
	epic_dcsr		quadword unsigned;
	epic_pear		quadword unsigned;
	epic_sear		quadword unsigned;
	epic_tbr1		quadword unsigned;
	epic_tbr2		quadword unsigned;
	epic_pbr1		quadword unsigned;
	epic_pbr2		quadword unsigned;
	epic_pmr1		quadword unsigned;
	epic_pmr2		quadword unsigned;
	epic_harx1		quadword unsigned;
	epic_harx2		quadword unsigned;
	epic_pmlt		quadword unsigned;
	epic_tag0		quadword unsigned;
	epic_tag1		quadword unsigned;
	epic_tag2		quadword unsigned;
	epic_tag3		quadword unsigned;
	epic_tag4		quadword unsigned;
	epic_tag5		quadword unsigned;
	epic_tag6		quadword unsigned;
	epic_tag7		quadword unsigned;
	epic_data0		quadword unsigned;
	epic_data1		quadword unsigned;
	epic_data2		quadword unsigned;
	epic_data3		quadword unsigned;
	epic_data4		quadword unsigned;
	epic_data5		quadword unsigned;
	epic_data6		quadword unsigned;
	epic_data7		quadword unsigned;
end PAL$LOGOUT;

aggregate PAL$LOGOUT_620 structure prefix "" tag "" fill;
	r_byte_count		quadword unsigned;
	sys_proc$$offset	quadword unsigned;
	mchk_code		quadword unsigned;
end PAL$LOGOUT_620;

aggregate PAL$LOGOUT_630 structure prefix "" tag "" fill;
	r_byte_count		quadword unsigned;
	sys_proc$$offset	quadword unsigned;
	mchk_code		quadword unsigned;
	biu_stat		quadword unsigned;
	biu_addr		quadword unsigned;
	biu_ctl			quadword unsigned;
	fill_syndrome		quadword unsigned;
	fill_addr		quadword unsigned;
	bc_tag			quadword unsigned;
end PAL$LOGOUT_630;

aggregate DEVICE structure prefix "" tag "";
    HOSE byte unsigned;
    SLOT byte unsigned;
    NUM_VECTOR word unsigned;
    VMS_VECTOR word unsigned;
    OSF_VECTOR word unsigned;
    TYPE longword unsigned;
	constant TYPE_NONE equals 0;
	constant TYPE_NCR53C710_SCSI equals 1;
	constant TYPE_TGEC equals 2;
	constant TYPE_IIC equals 9;
	constant TYPE_NCR53C710_DSSI equals 10;
	constant TYPE_NCR53C710 equals 100;
    VERSION longword unsigned;
    SPECIFIC union fill;
	SPECIFIC_MAX quadword unsigned dimension 2;
	TGEC_SPECIFIC structure fill;
	    SA byte unsigned dimension 6;
	    MODE structure fill;
		SA bitfield mask;
		SE bitfield mask;
		HW bitfield mask;
	    end MODE;
	    BURST byte unsigned;
	end TGEC_SPECIFIC;
	NCR53C710_SPECIFIC structure fill;
	    BUS_ID byte unsigned;
	    FAST byte unsigned;
	    SPEED word unsigned;
	end NCR53C710_SPECIFIC;
    end SPECIFIC;
end DEVICE;

aggregate CONFIG structure prefix "" tag "";
    SIZE quadword unsigned;
    CHECKSUM quadword unsigned;
    VERSION longword unsigned;
	constant CONFIG_VERSION equals 1;
    NUM_DEVICES longword unsigned;
	constant MAX_DEVICES equals 16;
    DEVICES DEVICE dimension 16;
end CONFIG;

end_module;
