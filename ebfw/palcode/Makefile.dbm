CONFIG_DIR=../../..
include $(CONFIG_DIR)/sdkmake.conf

include $(EB_BASE)/rules.gnu

AS				= as
LC				= $(shell echo '$1' | tr '[:upper:]' '[:lower:]' )
LD				= ld
CPP				= cpp
OBJCOPY		= objcopy
OBJDUMP		= objdump
DELETE		= rm -f
PVC				=	$(EB_TOOLBOX)/pvc

INCLUDES	= $(SROM_INCLUDES)

ASFLAGS		= -m$(call LC,$(CPUTYPE))
LDFLAGS	  = --orphan-handling=warn -nostdlib -T../palcode.ld -z noexecstack --no-dynamic-linker -static
#
# Define NPHALT if you want a non-privileged HALT function
# (useful for debugging), otherwise, only the privileged
# HALT function is available.
#
# Define KDEBUG if you want a special unprivileged CALL_PAL
# breakpoint trap handler for remote kernel debugging.
#
CPPFLAGS	= $(CCFLAGS_GLOBAL) -fdollars-in-identifiers \
						-DNPHALT \
						-DKDEBUG \
						-DCONSOLE_ENTRY=0x$(DBMENTRY) \
						-DDISABLE_MACHINE_CHECKS \
						-DSROM_SERIAL_PORT

SRCS = osfpal.s ../srom_dbm.s ../sromcsrv.s platform.s

.PHONY = all clean pvc

all : $(OBJDIR)osfpal $(OBJDIR)osfpal.lis $(OBJDIR)osfpal.nh

# osfpal
$(OBJDIR)%.sp : %.s
	$(CPP) $(CPPFLAGS) $(INCLUDES) $^ > $@

$(OBJDIR)%.sp : ../%.s
	$(CPP) $(CPPFLAGS) $(INCLUDES) $^ > $@

$(OBJDIR)%.o : $(OBJDIR)%.sp
	$(AS) $(ASFLAGS) -o $@ $^

$(OBJDIR)osfpal : $(addprefix $(OBJDIR), $(notdir $(SRCS:.s=.o)))
	$(LD) -Map=$(OBJDIR)osfpal.map $(LDFLAGS) -o $@ $^

# osfpal listing
$(OBJDIR)osfpal.lis : $(OBJDIR)osfpal
	$(OBJDUMP) -x -D $< > $@

# pvc
$(OBJDIR)osfpal.pvc : $(OBJDIR)osfpal.nh $(OBJDIR)osfpal.ent $(OBJDIR)osfpal.map
	echo set code_file $(OBJDIR)osfpal.nh > $@
	echo set entry_file $(OBJDIR)osfpal.ent >> $@
	echo set map_file $(OBJDIR)osfpal.map >> $@
	echo set cpu $(CPUTYPE) >> $@
	echo go >> $@
	echo quit >> $@

$(OBJDIR)osfpal.nh : $(OBJDIR)osfpal
	$(OBJCOPY) -O binary $< $@

$(OBJDIR)osfpal.map : $(OBJDIR)osfpal
	$(OBJDUMP) -tw $< | grep -i "pvc\\$$" > $@

$(OBJDIR)osfpal.ent : $(OBJDIR)osfpal
	$(OBJDUMP) -tw $< | grep -i "pvc\\$$" > $@

pvc : $(OBJDIR)osfpal.pvc
	$(PVC) < $(OBJDIR)osfpal.pvc

clean :
	$(DELETE) *.o *~ \#*\# *.bak *.a core \
		$(OBJDIR)osfpal		\
		$(OBJDIR)osfpal.lis	\
		$(OBJDIR)osfpal.map	\
		$(OBJDIR)osfpal.sp	\
		$(OBJDIR)osfpal.o	\
		$(OBJDIR)osfpal.nh	\
		$(OBJDIR)osfpal.pvc		\
		$(OBJDIR)osfpal.ent	\
		$(OBJDIR)platform.sp	\
		$(OBJDIR)platform.o	\
		$(OBJDIR)sromcsrv.sp	\
		$(OBJDIR)sromcsrv.o	\
		$(OBJDIR)srom_dbm.sp	\
		$(OBJDIR)srom_dbm.o

# Dependencies
DEPDIR := .deps
DEPFLAGS = -MT $@ -MMD -MP -MF $(DEPDIR)/$*.d

COMPILE.s = $(CPP) $(DEPFLAGS) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c

%.sp : %.s
%.sp : %.s $(DEPDIR)/%.d | $(DEPDIR)
		$(COMPILE.s) $(OUTPUT_OPTION) $<

$(DEPDIR): ; @mkdir -p $@

DEPFILES := $(addprefix $(DEPDIR)/, $(notdir $(SRCS:.s=.d)))
$(DEPFILES):
include $(wildcard $(DEPFILES))
