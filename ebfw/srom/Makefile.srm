CONFIG_DIR=../../..
include $(CONFIG_DIR)/sdkmake.conf

include $(EB_BASE)/rules.gnu

# TODO rules.gnu for linux crosscompile
AS				= as
LC				= $(shell echo '$1' | tr '[:upper:]' '[:lower:]' )
CC				= gcc
CPP				= cpp
OBJCOPY		= objcopy
OBJDUMP		= objdump
COPY			= cp -p
CHMOD			= chmod
DELETE		= rm -f
CAT				= cat
SROM			= $(TOOLBOX)/srom
HEXPAD		= $(TOOLBOX)/hexpad
MAKEROM		= $(TOOLBOX)/makerom

INCLUDES	= $(SROM_INCLUDES) -I$(OBJDIR) 

CPPFLAGS	= $(CCFLAGS_GLOBAL) -fdollars-in-identifiers
ASFLAGS		= -R -m$(call LC,$(CPUTYPE))
SROMFLAGS	= $(SROM_FLAGS_GLOBAL)

lx164_SROMSIZE = -x0x4004
sx164_SROMSIZE = -x0x4004
HEXPADFLAGS = $(HEXPAD_FLAGS_GLOBAL) $($(TARGET)_SROMSIZE)

DEFSTEXT_sx164 = rom
ifdef DEFSTEXT_$(TARGET)
SUBTARGETEXT ?= $(DEFSTEXT_$(TARGET))
else
SUBTARGETEXT ?= pad
endif

SUBTARGET ?= _sr

SRCS = srom.s
PROGRAM	= $(TARGET)$(SUBTARGET)

BUILD_TARGETS = \
	$(BOOTDIR)$(PROGRAM).img \
	$(BOOTDIR)$(PROGRAM).hex \
	$(OBJDIR)$(PROGRAM).lis  \
	$(BOOTDIR)$(PROGRAM).$(SUBTARGETEXT)

# -------------------------------------------------
# Main targets
# -------------------------------------------------
all : $(BUILD_TARGETS)

# ------------------------------------------------
# A special minidebugger (mdxxxd.exe is 
# used for building into the SROMs.  It contains a 
# dispatch table which allows the SROM to call 
# routines in the minidebugger
# ------------------------------------------------

# sx164
MDBG_sx164			= $(TOOLBOX)/md164PCd.exe
DMDBG_sx164_D0	= $(TOOLBOX)/md164PCd.exe
DMDBG_sx164_D1	= $(TOOLBOX)/md164PCd.exe
DMDBG_sx164_D2	=
DMDBG_sx164_D3	= $(TOOLBOX)/md164PCd.exe
ifdef EB_DEBUG_SROM
DMDBG_sx164			= $(DMDBG_sx164_D$(EB_DEBUG_SROM))
else
DMDBG_sx164			= $(TOOLBOX)/md164PCd.exe
endif

# lx164
MDBG_lx164			=
DMDBG_lx164			= $(TOOLBOX)/md164.exe

ifdef EB_DEBUG_SROM
MINIDBG 				= $(DMDBG_$(TARGET))
SROM_CPP				= -DDEBUG_BOARD=$(EB_DEBUG_SROM)
else
MINIDBG 				= $(MDBG_$(TARGET))
SROM_CPP				=
endif

CPPFLAGS	+= $(SROM_CPP)

#-----------------------------------------------------------
# Rules for creating main targets.
#-----------------------------------------------------------
$(BOOTDIR)$(PROGRAM).img : $(OBJDIR)$(PROGRAM).img $(BOOTDIR)
$(BOOTDIR)$(PROGRAM).hex : $(OBJDIR)$(PROGRAM).hex $(BOOTDIR)
$(BOOTDIR)$(PROGRAM).pad: $(OBJDIR)$(PROGRAM).pad $(BOOTDIR)
$(BOOTDIR)$(PROGRAM).rom: $(OBJDIR)$(PROGRAM).rom $(BOOTDIR)
	$(COPY) $< $@
	$(CHMOD) 664 $@

$(PROGRAM).lis $(OBJDIR)$(PROGRAM).lis : $(OBJDIR)$(PROGRAM).out
	$(OBJDUMP) -x $< > $@
#	$(ALIST) $< > $@

#-----------------------------------------------------------
# Rules for creating files that are needed to build the
# main targets.
#-----------------------------------------------------------
$(OBJDIR)rcsv.h : $(SRCS)
	$(TOOLBOX)/rcsv -v $^ $@

$(OBJDIR)$(PROGRAM).sp :: $(OBJDIR)rcsv.h ;
$(OBJDIR)$(PROGRAM).sp :: $(SRCS)
	$(CPP) $(CPPFLAGS) $(INCLUDES) $^ > $@

$(OBJDIR)$(PROGRAM).out : $(OBJDIR)$(PROGRAM).sp
	$(AS) $(ASFLAGS) -o $@ $^

$(OBJDIR)$(PROGRAM).nh : $(OBJDIR)$(PROGRAM).out
	$(OBJCOPY) -O binary $< $@
#	$(ASTRIP) $(ASTRIP_FLAGS) $(OBJDIR)$(PROGRAM).out $(OBJDIR)$(PROGRAM).nh

$(PROGRAM).img $(OBJDIR)$(PROGRAM).img : $(OBJDIR)$(PROGRAM).nh $(MINIDBG)
	$(CAT) $^ > $@

$(PROGRAM).hex $(OBJDIR)$(PROGRAM).hex : $(OBJDIR)$(PROGRAM).img
	$(SROM) $(SROMFLAGS) $^ $@

$(PROGRAM).pad $(OBJDIR)$(PROGRAM).pad : $(OBJDIR)$(PROGRAM).hex
	$(HEXPAD) $(HEXPADFLAGS) $^ $@

$(PROGRAM).rom $(OBJDIR)$(PROGRAM).rom : $(OBJDIR)$(PROGRAM).img
	$(MAKEROM) -v -e -iSROM -l0 $^ -o $@

$(BOOTDIR):
	mkdir $(BOOTDIR)
ifneq "$(EB_BUILD_SYSTEM)" "WINNT"
	chmod a+r+x $(BOOTDIR)
endif

clean :
	$(DELETE) *.o *~ \#*\# *.bak *.a core \
		$(OBJDIR)$(PROGRAM).img \
		$(OBJDIR)$(PROGRAM).hex \
		$(OBJDIR)$(PROGRAM).pad \
		$(OBJDIR)$(PROGRAM).rom \
		$(OBJDIR)$(PROGRAM).lis \
		$(OBJDIR)$(PROGRAM).sp \
		$(OBJDIR)$(PROGRAM).out \
		$(OBJDIR)$(PROGRAM).nh \
		$(OBJDIR)rcsv.h

# Dependencies
DEPDIR := .deps
DEPFLAGS = -MT $@ -MMD -MP -MF $(DEPDIR)/$*.d

COMPILE.s = $(CPP) $(DEPFLAGS) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c

%.sp : %.s
%.sp : %.s $(DEPDIR)/%.d | $(DEPDIR)
		$(COMPILE.s) $(OUTPUT_OPTION) $<

$(DEPDIR): ; @mkdir -p $@

DEPFILES := $(SRCS:%=$(DEPDIR)/%.d)
$(DEPFILES):

include $(wildcard $(DEPFILES))
